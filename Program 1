#include <stdio.h>

#include <stdlib.h>

#include <unistd.h>

#include <sys/wait.h>

int main() {
    pid_t cid;
    int status;

    cid = fork();

    if (cid == -1) {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }
    if (cid == 0) {
        printf("Child Process: PID = %d\n", getpid());
        char * args[] = {
            "/bin/ls",
            "-l",
            NULL
        };
        execvp(args[0], args);
        perror("Exec failed");
        exit(EXIT_FAILURE);
    } else {
        wait( & status);
        if (WIFEXITED(status)) {
            printf("Parent process: Child Process terminated with exit status %d\n", WEXITSTATUS(status));
        } else {
            printf("Parent process: Child Process did not terminate normally\n");
        }
        printf("Parent Process: PID = %d\n", getpid());
    }
    return 0;
}
